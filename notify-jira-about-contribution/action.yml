name: Notify JIRA About External Contribution

description: Notifies JIRA about external contribution

inputs:
  team:
    required: true
    description: Team that we are checking against
  repo:
    required: true
    description: Repository name
  pull-number:
    required: true
    description: Nth pull request
  jira-hook:
    required: true
    description: JIRA automation hook for contribution
  github-token:
    required: true
    description: Token for authorization
  notify-about-major-dependabot-updates:
    required: false
    description: Notify about major dependabot updates
    type: boolean
    default: false
  dependabot-ticket-jira-label:
    required: false
    description: Label for dependabot ticket in JIRA
    default: "ready-for-refinement"

runs:
  using: composite
  steps:
    - name: Get PR data
      id: get-pr
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/{org}/{repo}/pulls/{pull-number}
        org: toptal
        repo: ${{ inputs.repo }}
        pull-number: ${{ inputs.pull-number }}
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Check if author is a member of specific team
      uses: toptal/davinci-github-actions/is-team-member@v6.0.0
      id: is-team-member
      with:
        team: ${{ inputs.team }}
        login: ${{ fromJson(steps.get-pr.outputs.data).user.login }}
        github-token: ${{ inputs.github-token }}

    - name: Check if PR comes fron dependabot
      env:
        # TODO: revert before merge
        # IS_DEPENDABOT: ${{ fromJson(steps.get-pr.outputs.data).user.login == 'dependabot[bot]' }}
        IS_DEPENDABOT: ${{ fromJson(steps.get-pr.outputs.data).user.login == 'sashuk' }}
      id: is-dependabot
      shell: bash
      run: |
        echo "result=${{ env.IS_DEPENDABOT }}" >> $GITHUB_OUTPUT

    - name: Check if Jira issue already exists
      id: jira-issue-already-exists
      shell: bash
      run: |
        echo "result=${{ contains(github.event.pull_request.labels.*.name, 'contribution') }}" >> $GITHUB_OUTPUT

    - name: Decide if Jira ticket needs to be created
      id: is-pr-eligible
      env:
        IS_TEAM_MEMBER: ${{ fromJson(steps.is-team-member.outputs.result) }}
        IS_DEPENDABOT: ${{ steps.is-dependabot.outputs.result }}

        # TODO: revert before merge
        # IS_DRAFT: ${{ fromJson(steps.get-pr.outputs.data).draft }}
        IS_DRAFT: false

        NOTIFY_ABOUT_MAJOR_DEPENDABOT_UPDATES: ${{ inputs.notify-about-major-dependabot-updates }}
        JIRA_ISSUE_ALREADY_EXISTS: ${{ steps.jira-issue-already-exists.outputs.result }}
        PR_TITLE: ${{ fromJson(steps.get-pr.outputs.data).title }}
      shell: bash
      run: |
        echo "Checking if Jira ticket already exists or PR is a draft"
        if [[ ${{ env.JIRA_ISSUE_ALREADY_EXISTS }} == "true" || ${{ env.IS_DRAFT }} == "true" ]]; then
          echo "result=true" >> $GITHUB_OUTPUT
          exit
        fi

        update_string="${{ env.PR_TITLE }}"

        old_version=$(echo "$update_string" | awk '{match($0, /[0-9]+(\.[0-9]+)*/, arr); print arr[0]}')
        new_version=$(echo "$update_string" | awk '{match($0, /to [0-9]+(\.[0-9]+)*/, arr); gsub("to ", "", arr[0]); print arr[0]}')

        old_major=$(echo "$old_version" | cut -d. -f1)
        new_major=$(echo "$new_version" | cut -d. -f1)

        isMajorUpdate=false
        if [ "$old_major" != "$new_major" ]; then
          isMajorUpdate=true
        fi

        isTeamMember=${{ env.IS_TEAM_MEMBER }}
        isDependabot=${{ env.IS_DEPENDABOT }}
        notifyAboutMajorDependabotUpdates=${{ env.NOTIFY_ABOUT_MAJOR_DEPENDABOT_UPDATES }}
        if [[ $notifyAboutMajorDependabotUpdates == "true" && $isDependabot == "true" ]]; then
          if [[ $isMajorUpdate == "true" ]]; then
            echo "Major dependabot update"
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "Non-major dependabot update"
            echo "result=false" >> $GITHUB_OUTPUT
          fi

          exit
        fi

        if [[ $isTeamMember == "false" ]]; then
          echo "result=true" >> $GITHUB_OUTPUT
        fi

        echo "result=false" >> $GITHUB_OUTPUT

    # TODO: remove before merge
    - name: Debug output
      shell: bash
      env:
        PREVIOUS_STEP_RESULT: ${{ steps.is-pr-eligible.outputs.result }}
      run: |
        echo "Previous step result: ${{ env.PREVIOUS_STEP_RESULT }}"

    # Create JIRA issue
    - name: Add label - JIRA issue created - for non-Draft PR
      if: ${{ steps.is-pr-eligible.outputs.result == true }}
      uses: andymckay/labeler@1.0.4
      with:
        add-labels: "contribution"

    - name: Add label for dependabot pull requests
      if: ${{ steps.is-pr-eligible.outputs.result == true && steps.is-dependabot.outputs.result == true }}
      uses: andymckay/labeler@1.0.4
      with:
        add-labels: ${{ inputs.dependabot-ticket-jira-label }}

    # TODO: uncomment to create actual ticket before the merge
    # - name: Create JIRA ticket
    #   if: ${{ steps.jira-issue-can-be-created.outputs.result == true }}
    #   shell: bash
    #   env:
    #     JIRA_HOOK: ${{ inputs.jira-hook }}
    #     REPO: ${{ inputs.repo }}
    #     TITLE: ${{ fromJson(steps.get-pr.outputs.data).title }}
    #     AUTHOR: ${{ fromJson(steps.get-pr.outputs.data).user.login }}
    #     AUTHOR_URL: ${{ fromJson(steps.get-pr.outputs.data).user.html_url }}
    #     NUMBER: ${{ fromJson(steps.get-pr.outputs.data).number }}
    #     URL: ${{ fromJson(steps.get-pr.outputs.data).html_url }}
    #   run: bash ${{ github.action_path }}/notify-jira.sh

    - name: Greet author
      if: ${{ steps.jira-issue-can-be-created.outputs.result == true && steps.is-dependabot.outputs.result == false }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          github.rest.issues.createComment({
            issue_number: ${{ fromJson(steps.get-pr.outputs.data).number }},
            owner: "toptal",
            repo: "${{ inputs.repo }}",
            body:
            `
            Greetings from FX team, @${{ fromJson(steps.get-pr.outputs.data).user.login }} :wave:\r\n\r\n
            Thank you so much for contributing :bow:\r\n\r\n
            We have got **high priority ticket** generated on [our Kanban board](https://toptal-core.atlassian.net/jira/software/c/projects/FX/boards/491) so we will do our best to make your experience supreme!\r\n\r\n
            What's next? We will collaborate using [this workflow](https://toptal-core.atlassian.net/wiki/spaces/FE/pages/2396094469/Handling+contribution). For you this practically means making sure [DONE criteria](https://toptal-core.atlassian.net/wiki/spaces/FE/pages/1933377584/Done+criteria) is met and responding promptly to code review comments :wink:\r\n\r\n
            :pray: please, help us improve, [rate your contributing experience](https://forms.gle/unzJBEJAHRz7LEtX8) after merge
            `
          })
