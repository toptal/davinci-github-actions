name: Notify JIRA About External Contribution

description: Notifies JIRA about external contribution

inputs:
  team:
    required: true
    description: Team that we are checking against
  repo:
    required: true
    description: Repository name
  pull-number:
    required: true
    description: Nth pull request
  jira-hook:
    required: true
    description: JIRA automation hook for contribution
  github-token:
    required: true
    description: Token for authorization
  should-notify-about-major-dependency-updates:
    required: false
    description: Specifies if action should create Jira issues for major dependency updates (authored by dependabot)
    type: boolean
    default: false

runs:
  using: composite
  steps:
    - name: Get PR data
      id: get-pr
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/{org}/{repo}/pulls/{pull-number}
        org: toptal
        repo: ${{ inputs.repo }}
        pull-number: ${{ inputs.pull-number }}
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Check if author is a member of specific team
      uses: toptal/davinci-github-actions/is-team-member@v6.0.0
      id: is-team-member
      with:
        team: ${{ inputs.team }}
        login: ${{ fromJson(steps.get-pr.outputs.data).user.login }}
        github-token: ${{ inputs.github-token }}

    - name: Check if PR comes fron dependabot
      env:
        IS_DEPENDABOT_PULL_REQUEST: ${{ fromJson(steps.get-pr.outputs.data).user.login == 'dependabot[bot]' }}
      id: is-dependabot-pull-request
      shell: bash
      run: |
        echo "result=${{ env.IS_DEPENDABOT_PULL_REQUEST }}" >> $GITHUB_OUTPUT

    - name: Check if Jira issue already exists
      id: jira-issue-already-exists
      shell: bash
      run: |
        echo "result=${{ contains(github.event.pull_request.labels.*.name, 'contribution') }}" >> $GITHUB_OUTPUT

    - name: Decide if Jira issue should be created
      id: should-create-jira-issue
      env:
        IS_TEAM_MEMBER: ${{ fromJson(steps.is-team-member.outputs.result) }}
        IS_DEPENDABOT_PULL_REQUEST: ${{ steps.is-dependabot-pull-request.outputs.result }}
        IS_DRAFT: ${{ fromJson(steps.get-pr.outputs.data).draft }}
        SHOULD_NOTIFY_ABOUT_MAJOR_DEPENDENCY_UPDATES: ${{ inputs.should-notify-about-major-dependency-updates }}
        JIRA_ISSUE_ALREADY_EXISTS: ${{ steps.jira-issue-already-exists.outputs.result }}
        PR_TITLE: ${{ fromJson(steps.get-pr.outputs.data).title }}
      shell: bash
      run: |
        jiraIssueAlreadyExists=${{ env.JIRA_ISSUE_ALREADY_EXISTS }}
        if [[ $jiraIssueAlreadyExists == "true" ]]; then
          echo "Jira issue already exists"
          echo "result=false" >> $GITHUB_OUTPUT
          exit
        fi

        isDraft=${{ env.IS_DRAFT }}
        if [[ $isDraft == "true" ]]; then
          echo "Pull request is a draft"
          echo "result=false" >> $GITHUB_OUTPUT
          exit
        fi

        # Exit early if pull request is not from dependabot
        isDependabotPullRequest=${{ env.IS_DEPENDABOT_PULL_REQUEST }}
        if [[ $isDependabotPullRequest == "false" ]]; then
          isTeamMember=${{ env.IS_TEAM_MEMBER }}
          if [[ $isTeamMember == "true" ]]; then
            echo "Pull request author is member of ${{ inputs.team }}"
            echo "result=false" >> $GITHUB_OUTPUT
            exit
          fi

          echo "Pull request author is not a member of ${{ inputs.team }}"
          echo "result=true" >> $GITHUB_OUTPUT
          exit
        fi

        shouldNotifyAboutMajorDependencyUpdates=${{ env.SHOULD_NOTIFY_ABOUT_MAJOR_DEPENDENCY_UPDATES }}
        if [[ $shouldNotifyAboutMajorDependencyUpdates == "false" ]]; then
          echo "No need to notify about dependency updates"
          echo "result=false" >> $GITHUB_OUTPUT
          exit
        fi

        pullRequestTitle="${{ env.PR_TITLE }}"

        # Extract major versions using grep utility
        # For "Bump @cypress/webpack-preprocessor from 5.17.1 to 6.0.1" it returns "5"
        currentMajorVersion=$(echo "$pullRequestTitle" | grep --only-matching --extended-regexp 'from [0-9]+(\.[0-9]+)?' | cut -d' ' -f2 | cut -d'.' -f1)
        if [ -z "$currentMajorVersion" ]; then
          echo "Error: Unable to extract current major version" >&2
          exit 1
        fi

        # For "Bump @cypress/webpack-preprocessor from 5.17.1 to 6.0.1" it returns "6"
        newMajorVersion=$(echo "$pullRequestTitle" | grep --only-matching --extended-regexp 'to [0-9]+(\.[0-9]+)?' | cut -d' ' -f2 | cut -d'.' -f1)
        if [ -z "$newMajorVersion" ]; then
          echo "Error: Unable to extract new major version" >&2
          exit 1
        fi

        if [ "$currentMajorVersion" == "$newMajorVersion" ]; then
          echo "Is not a major dependency update"
          echo "result=false" >> $GITHUB_OUTPUT
          exit
        fi

        echo "Is major dependency update"
        echo "result=true" >> $GITHUB_OUTPUT

    # Create JIRA issue
    - name: Add label - JIRA issue created - for non-Draft PR
      if: ${{ fromJson(steps.should-create-jira-issue.outputs.result) == true }}
      uses: andymckay/labeler@1.0.4
      with:
        repo-token: ${{ inputs.github-token }}
        add-labels: "contribution"

    # TODO: uncomment it
    # - name: Create Jira issue
    #   if: ${{ fromJson(steps.should-create-jira-issue.outputs.result) == true }}
    #   shell: bash
    #   env:
    #     JIRA_HOOK: ${{ inputs.jira-hook }}
    #     REPO: ${{ inputs.repo }}
    #     TITLE: ${{ fromJson(steps.get-pr.outputs.data).title }}
    #     AUTHOR: ${{ fromJson(steps.get-pr.outputs.data).user.login }}
    #     AUTHOR_URL: ${{ fromJson(steps.get-pr.outputs.data).user.html_url }}
    #     NUMBER: ${{ fromJson(steps.get-pr.outputs.data).number }}
    #     URL: ${{ fromJson(steps.get-pr.outputs.data).html_url }}
    #   run: bash ${{ github.action_path }}/notify-jira.sh

    - name: Greet author
      if: ${{ fromJson(steps.should-create-jira-issue.outputs.result) == true && fromJson(steps.is-dependabot-pull-request.outputs.result) == false }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          github.rest.issues.createComment({
            issue_number: ${{ fromJson(steps.get-pr.outputs.data).number }},
            owner: "toptal",
            repo: "${{ inputs.repo }}",
            body:
            `
            Greetings from FX team, @${{ fromJson(steps.get-pr.outputs.data).user.login }} :wave:\r\n\r\n
            Thank you so much for contributing :bow:\r\n\r\n
            We have got **high priority ticket** generated on [our Kanban board](https://toptal-core.atlassian.net/jira/software/c/projects/FX/boards/491) so we will do our best to make your experience supreme!\r\n\r\n
            What's next? We will collaborate using [this workflow](https://toptal-core.atlassian.net/wiki/spaces/FE/pages/2396094469/Handling+contribution). For you this practically means making sure [DONE criteria](https://toptal-core.atlassian.net/wiki/spaces/FE/pages/1933377584/Done+criteria) is met and responding promptly to code review comments :wink:\r\n\r\n
            :pray: please, help us improve, [rate your contributing experience](https://forms.gle/unzJBEJAHRz7LEtX8) after merge
            `
          })
