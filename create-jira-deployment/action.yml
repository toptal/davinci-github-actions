name: Create new Jira Deployment
description: |
  It creates and engages a new Jira Deployment. Notice: Jira App must be installed in the repository.

inputs:
  jenkins_url:
    description: 'Jenkins build instance URL'
    required: true
  jenkins_user:
    description: 'Jenkins build user'
    required: true
  jenkins_token:
    description: 'Jenkins build token'
    required: true
  jenkins_client_id:
    description: 'Jenkins Client ID used with IAP'
    required: true
  jenkins_sa_credentials:
    description: 'Jenkins service account credentials to use with IAP'
    required: true
  token:
    required: true
    description: 'GitHub token to create a deployment'
  environment-url:
    required: false
    description: 'URL of the environment'
  environment:
    required: true
    description: 'Name for the target deployment environment'
  transient-environment:
    required: false
    description: 'Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future.'
    default: 'true'
  auto-inactive:
    required: false
    description: Adds a new inactive status to all prior non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. An inactive status is only added to deployments that had a success state.
    default: 'true'
  create-gh-deployment:
    required: false
    default: 'false'
    description: Creates a Github Deployment along with JIRA Deployment

runs:
  using: composite
  steps:
    # - uses: chrnorm/deployment-action@v2
    #   name: Create GitHub deployment
    #   id: gh-deployment
    #   if: ${{ always() && inputs.create-gh-deployment == 'true' }}
    #   with:
    #     token: ${{ inputs.token }}
    #     environment-url: ${{ inputs.environment-url }}
    #     environment: ${{ inputs.environment }}
    #     transient-environment: ${{ inputs.transient-environment }}
    #     auto-inactive: ${{ inputs.auto-inactive }}

    # - name: Update deployment status on success
    #   if: ${{ success() && inputs.create-gh-deployment == 'true' }}
    #   uses: chrnorm/deployment-status@v2
    #   with:
    #     token: ${{ inputs.token }}
    #     environment-url: ${{ steps.gh-deployment.outputs.environment_url }}
    #     deployment-id: ${{ steps.gh-deployment.outputs.deployment_id }}
    #     log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    #     state: 'success'

    # - name: Update deployment status on failure
    #   if: ${{ failure() && inputs.create-gh-deployment == 'true' }}
    #   uses: chrnorm/deployment-status@v2
    #   with:
    #     token: ${{ inputs.token }}
    #     environment-url: ${{ steps.gh-deployment.outputs.environment_url }}
    #     deployment-id: ${{ steps.gh-deployment.outputs.deployment_id }}
    #     log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    #     state: 'failure'

    # - name: Set appName
    #   id: repo
    #   if: ${{ always() }}
    #   shell: bash
    #   run: |
    #     echo APP_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2) >> $GITHUB_OUTPUT

    # - id: sha
    #   uses: toptal/davinci-github-actions/get-workflow-sha@master

    - name: Trigger `Create JIRA` deployment
      uses: toptal/actions/trigger-jenkins-job@main
      if: ${{ always() }}
      with:
        jenkins_url: ${{ inputs.jenkins_url }}
        jenkins_user: ${{ inputs.jenkins_user }}
        jenkins_token: ${{ inputs.jenkins_token }}
        jenkins_client_id: ${{ inputs.jenkins_client_id }}
        jenkins_sa_credentials: ${{ inputs.jenkins_sa_credentials }}
        # job_name: create-jira-deployment
        # job_params: |
        #   {
        #     "appName": "${{ steps.repo.outputs.APP_NAME }}",
        #     "envName": "${{ inputs.environment }}",
        #     "sha": "${{ github.event.pull_request.head.sha || steps.sha.outputs.result }}"
        #   }
        job_name: job-test-iap
        job_timeout: '3600'
