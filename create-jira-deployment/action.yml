name: Create new Jira Deployment
description: |
  It creates and engages a new Jira Deployment. Notice: Jira App must be installed in the repository.
  ****
  envInputs:
    JIRA_USER: Jenkins user
    JENKINS_BUILD_TOKEN: Jenkins build token. Keep in mind that tokens for `temploy` and `staging` differ
    PROXY: Proxy to use for Jenkins

inputs:
  token:
    required: true
    description: 'GitHub token to create a deployment'
  environment-url:
    required: true
    description: 'URL of the environment'
  environment:
    required: true
    description: 'Name for the target deployment environment'
  transient-environment:
    required: false
    description: 'Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future.'
    default: 'true'
  auto-inactive:
    required: false
    description: Adds a new inactive status to all prior non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. An inactive status is only added to deployments that had a success state.
    default: 'true'

runs:
  using: composite
  steps:
    - uses: chrnorm/deployment-action@v2
      name: Create GitHub deployment
      id: gh-deployment
      if: ${{ always() }}
      with:
        token: ${{ inputs.token }}
        environment-url: ${{ inputs.environment-url }}
        environment: ${{ inputs.environment }}
        transient-environment: ${{ inputs.transient-environment }}
        auto-inactive: ${{ inputs.auto-inactive }}

    - name: Update deployment status on success
      if: ${{ success() }}
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ inputs.token }}
        environment-url: ${{ steps.gh-deployment.outputs.environment_url }}
        deployment-id: ${{ steps.gh-deployment.outputs.deployment_id }}
        log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: 'success'

    - name: Update deployment status on failure
      if: ${{ failure() }}
      uses: chrnorm/deployment-status@v2
      with:
        token: ${{ inputs.token }}
        environment-url: ${{ steps.gh-deployment.outputs.environment_url }}
        deployment-id: ${{ steps.gh-deployment.outputs.deployment_id }}
        log-url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        state: 'failure'

    - name: Set appName
      id: repo
      shell: bash
      run: |
        echo APP_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2) >> $GITHUB_OUTPUT

    - name: Set state
      id: state
      run: |
        if ${{ success() }}
        then
          echo STATE=success >> $GITHUB_OUTPUT
        elif ${{ failure() }}
        then
          echo STATE=failure >> $GITHUB_OUTPUT
        fi

    - name: Trigger `Create JIRA` deployment
      uses: toptal/jenkins-job-trigger-action@1.0.1
      with:
        jenkins_url: https://jenkins-build.toptal.net/
        jenkins_user: ${{ env.JIRA_USER }}
        jenkins_token: ${{ env.JENKINS_BUILD_TOKEN }}
        proxy: ${{ env.PROXY }}
        job_name: create-jira-deployment
        job_params: |
          {
            "appName": "${{ steps.repo.outputs.APP_NAME }}",
            "envName": "${{ inputs.environment }}",
            "sha": "${{ github.sha }}",
            "state": "${{ steps.state.outputs.STATE }}",
          }
        job_timeout: '3600'
