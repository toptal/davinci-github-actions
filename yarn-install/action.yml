name: Install dependencies
description: Install and cache node modules with yarn
inputs:
  npm-token:
    description: Access token type **Read-only**. Required for repository with private dependencies. If undefined, `env.NPM_TOKEN` is used
    required: false
  cache-version:
    description: "Cache version"
    default: "0.0"
    required: false
  path:
    description: Relative path under $GITHUB_WORKSPACE where to run `yarn install` command
    default: .
    required: false
  checkout-token:
    description: Repository checkout access token `GITHUB_TOKEN`. Required for self-hosted runners
    required: false
  npm-gar-token:
    description: Repository npm Artifact Registry access token `NPM_GAR_TOKEN`. Required when using self-hosted runners with npm in GAR (Google Artifact Registry, the npm registry works as a proxy-cache, downloading and storing the public npm packages)
    required: false
  max-attempts:
    description: How many times to retry installing. This is specially useful if the building of packages might fail because of network connections
    default: "1"
    required: false
outputs:
  cache-hit:
    description: "Indicates an exact match was found for `node_modules` || boolean"
    value: ${{ steps.node-modules-cache.outputs.cache-hit || steps.node-modules-cache-custom.outputs.cache-hit }}
runs:
  using: composite
  steps:
    - name: Set node version
      id: set-node-version
      run: echo version=$(node -v) >> $GITHUB_OUTPUT
      shell: bash

    - name: Get yarn cache
      id: yarn-cache
      run: echo dir=$(yarn cache dir) >> $GITHUB_OUTPUT
      shell: bash
      env:
        NPM_TOKEN: ${{ inputs.npm-token || env.NPM_TOKEN }}

    # This step is needed only because we want to update the cache when a new workspace
    # package has been added and we want symlinks to be presented in ./node_modules folder
    - name: Generate workspaces info
      working-directory: ${{ inputs.path }}
      run: |
        if grep -q "\"workspaces\":" package.json; then
          yarn --no-default-rc workspaces --json info > tmp-workspaces.json
        fi
      shell: bash

    - name: Checkout `cache action` from actions repository
      if: "inputs.checkout-token && (contains(runner.name, 'inf-gha-runners') || contains(runner.name, 'ubuntu2204'))"
      uses: actions/checkout@v4
      with:
        repository: toptal/actions
        token: ${{ inputs.checkout-token }}
        path: ./.github/cache_action/

    - name: Cache yarn and node_modules folder
      if: "inputs.checkout-token && (contains(runner.name, 'inf-gha-runners') || contains(runner.name, 'ubuntu2204'))"
      uses: ./.github/cache_action/cache/
      id: node-modules-cache-custom
      with:
        # Do not change the order of the values because if something goes wrong with the network or node_modules during
        # the caching process, GitHub can still end up creating a valid cache entry.
        # The cache from yarn is smaller and of higher priority for us
        path: |
          ${{ steps.yarn-cache.outputs.dir }}
          **/node_modules
        key: ${{ runner.os }}-${{ runner.arch }}-node-${{ steps.set-node-version.outputs.version }}-yarn-node_modules-${{ hashFiles(format('{0}/yarn.lock', inputs.path), format('{0}/tmp-workspaces.json', inputs.path)) }}-${{ inputs.cache-version }}

    - name: Cache yarn and node_modules folder
      if: "!(inputs.checkout-token && (contains(runner.name, 'inf-gha-runners') || contains(runner.name, 'ubuntu2204')))"
      uses: actions/cache@v4
      id: node-modules-cache
      with:
        # Do not change the order of the values because if something goes wrong with the network or node_modules during
        # the caching process, GitHub can still end up creating a valid cache entry.
        # The cache from yarn is smaller and of higher priority for us
        path: |
          ${{ steps.yarn-cache.outputs.dir }}
          **/node_modules
        key: ${{ runner.os }}-${{ runner.arch }}-node-${{ steps.set-node-version.outputs.version }}-yarn-node_modules-${{ hashFiles(format('{0}/yarn.lock', inputs.path), format('{0}/tmp-workspaces.json', inputs.path)) }}-${{ inputs.cache-version }}

    - name: Delete temporary tmp-workspaces.json
      shell: bash
      run: |
        [ -e tmp-workspaces.json ] && rm tmp-workspaces.json || echo "OK"

    # This step creates .npmrc file that references to npm registry in GAR (Google Artifact Registry)
    # The npm registry works as a proxy-cache, downloading and storing the public npm packages
    - name: Create .npmrc file using npm Artifact Registry
      if: "inputs.checkout-token && inputs.npm-gar-token && (contains(runner.name, 'inf-gha-runners') || contains(runner.name, 'ubuntu2204'))"
      run: |
        echo "registry=https://us-central1-npm.pkg.dev/toptal-ci/npm-registry/" > ${{ inputs.path }}/.npmrc &&
        echo "//us-central1-npm.pkg.dev/toptal-ci/npm-registry/:username=_json_key_base64" >> ${{ inputs.path }}/.npmrc &&
        echo "//us-central1-npm.pkg.dev/toptal-ci/npm-registry/:_password=${{ inputs.npm-gar-token }}" >> ${{ inputs.path }}/.npmrc &&

        echo "@toptal:registry=https://registry.npmjs.org/" >> ${{ inputs.path }}/.npmrc &&
        echo "//registry.npmjs.org/:_authToken=${{ inputs.npm-token || env.NPM_TOKEN }}" >> ${{ inputs.path }}/.npmrc &&

        echo "@topkit:registry=https://registry.npmjs.org/" >> ${{ inputs.path }}/.npmrc &&
        echo "//registry.npmjs.org/:_authToken=${{ inputs.npm-token || env.NPM_TOKEN }}" >> ${{ inputs.path }}/.npmrc &&
        echo "always-auth=true" >> ${{ inputs.path }}/.npmrc
      shell: bash

    # This step changes the public npm registry in yarn.lock file to npm in AR
    # We still use the public npm registry to our private packages
    - name: Change registry in yarn.lock file to npm Artifact Registry
      if: "inputs.checkout-token && inputs.npm-gar-token && (contains(runner.name, 'inf-gha-runners') || contains(runner.name, 'ubuntu2204'))"
      shell: bash
      run: |
        # Create a copy of specific URLs (npmjs.org, @toptal and @topkit) and since they are fewer to restore them back at later steps
        grep 'registry.npmjs.org\|registry.yarnpkg.com' ${{ inputs.path }}/yarn.lock | grep -v '/@toptal\|/@topkit' | awk '{print $2 " " $2}' > ${{ inputs.path }}/yarn.lock.tmp
        grep '/@toptal\|/@topkit' ${{ inputs.path }}/yarn.lock | awk '{print $2 " " $2}' >> ${{ inputs.path }}/yarn.lock.toptal

        # Change the URLs to the new registry for files created in the previous steps
        # Creates a TO/FROM list to be used when reverting back the URLs to the original registry
        sed -i -e "s#https://registry.yarnpkg.com/#https://us-central1-npm.pkg.dev/toptal-ci/npm-registry/#" ${{ inputs.path }}/yarn.lock.tmp
        sed -i -e "s#https://registry.npmjs.org/#https://us-central1-npm.pkg.dev/toptal-ci/npm-registry/#" ${{ inputs.path }}/yarn.lock.tmp
        sed -i -e "s#https://registry.yarnpkg.com/#https://us-central1-npm.pkg.dev/toptal-ci/npm-registry/#" ${{ inputs.path }}/yarn.lock.toptal
        sed -i -e "s#https://registry.npmjs.org/#https://us-central1-npm.pkg.dev/toptal-ci/npm-registry/#" ${{ inputs.path }}/yarn.lock.toptal

        # Change the URLs to AR registry for all ocurrences
        sed -i -e "s#https://registry.yarnpkg.com/#https://us-central1-npm.pkg.dev/toptal-ci/npm-registry/#g" ${{ inputs.path }}/yarn.lock
        sed -i -e "s#https://registry.npmjs.org/#https://us-central1-npm.pkg.dev/toptal-ci/npm-registry/#g" ${{ inputs.path }}/yarn.lock

        # Remove double quotes from the URLs
        sed -i -e "s/\"//g" ${{ inputs.path }}/yarn.lock.tmp
        sed -i -e "s/\"//g" ${{ inputs.path }}/yarn.lock.toptal

        # Revert the @toptal and @topkit packages to the original registry
        # Working on revert fewer ocurrences (specific list) is faster than loop all the file
        while read -r line; do
          url1="$(awk '{ print $1 }' <<<"$line")"
          url2="$(awk '{ print $2 }' <<<"$line")"
          sed -i -e "s~${url1}~${url2}~" ${{ inputs.path }}/yarn.lock
        done < ${{ inputs.path }}/yarn.lock.toptal

    - name: yarn install
      shell: bash
      working-directory: ${{ inputs.path }}
      env:
        NPM_TOKEN: ${{ inputs.npm-token || env.NPM_TOKEN }}
        MAX_ATTEMPTS: ${{ inputs.max-attempts }}
      run: |
        for i in {1..$MAX_ATTEMPTS}; do
          printf "Trying to install #%s...\n" "$i"
          yarn install --non-interactive && break
          sleep 10 # 10s wait time
        done



    # Revert the URLs to the original registry
    - name: Revert URLs to original registry
      if: "inputs.checkout-token && inputs.npm-gar-token && (contains(runner.name, 'inf-gha-runners') || contains(runner.name, 'ubuntu2204'))"
      shell: bash
      run: |
        # Revert specific URLs to npmjs.org
        while read -r line; do
          url1="$(awk '{ print $1 }' <<<"$line")"
          url2="$(awk '{ print $2 }' <<<"$line")"
          sed -i -e "s~${url1}~${url2}~" ${{ inputs.path }}/yarn.lock
        done < ${{ inputs.path }}/yarn.lock.tmp

        # Revert the leftovers URLs to yarnpkg.org registry
        sed -i -e "s#https://us-central1-npm.pkg.dev/toptal-ci/npm-registry/#https://registry.yarnpkg.com/#g" ${{ inputs.path }}/yarn.lock

      # We are manually checking for the changes in yarn.lock file, because
      # the `--frozen-lockfile` flag is not working correctly in workspaces with yarn v1
      # we can remove this step when we upgrade yarn or migrate to other package manager
    - name: Check for changes
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        git diff --exit-code yarn.lock || (echo 'yarn.lock changed after yarn install. Please make sure to commit yarn.lock changes.' && exit 1)
