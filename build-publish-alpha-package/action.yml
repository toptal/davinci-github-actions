name: Alpha Package release
description: Builds project and pushes a new alpha release to NPM
outputs:
  versions:
    description: 'List of new versions as output of `.version` file || string'
    value: ${{ steps.publish-package.outputs.versions }}

inputs:
  npm-token:
    required: true
    description: 'NPM token used for publishing. Has to be type Publish || string'
  branch:
    required: true
    description: 'Name of the branch that will be published || string'
  root-folder:
    required: false
    description: 'Root folder of a package to be published || string'
  node-version:
    required: false
    default: 20
    description: 'Node.js version used. The action is guaranteed to work only with Node.js@20 (default value)'

runs:
  using: composite
  steps:
    - name: Set up node
      uses: actions/setup-node@v4.0.0
      with:
        node-version: ${{ inputs.node-version }}

    - name: Setup npm # Add our registry to npm config
      shell: bash
      env:
        NPM_TOKEN: ${{ inputs.npm-token }}
      run: |
        npm set "//registry.npmjs.org/:_authToken=$NPM_TOKEN"

    - uses: toptal/davinci-github-actions/yarn-install@v12.8.1

    - name: Build package
      shell: bash
      run: |
        yarn build:package

    - name: Publish package
      id: publish-package
      shell: bash
      env:
        BRANCH: ${{ inputs.branch }}
        ROOT_FOLDER: ${{ inputs.root-folder }}
      run: |
        # set .github folder as an unchanged, because lerna throws an error if there are uncommited changes
        git checkout .github/

        yarn davinci-engine publish-package \
          --alpha \
          --outputVersion .version \
          --branch "$BRANCH" ${ROOT_FOLDER:+"--publishRootFolder=$ROOT_FOLDER"}

        versions=$(cat .version)
        [ -z "$versions" ] && exit 1

        echo "versions=$versions" >> $GITHUB_OUTPUT
