name: Deploy Storybook to a particular environment
description: |
  Builds and Deploys an application's Storybook to a particular environment
  ****
  envInputs:
    GITHUB_TOKEN: GitHub token. Is used to checkout `davinci` branch
    GCR_ACCOUNT_KEY: Necessary token to push image to Google cloud
    GCR_GQL_SCHEMAS_BUCKET_TOKEN: Necessary token to pull GQL schema from Google Cloud
    JENKINS_DEPLOY_TOKEN: Jenkins deployment token. Keep in mind that tokens for `temploy` and `staging` differ
    NPM_TOKEN:  Necessary token to install private dependencies 

inputs:
  sha:
    description: Commit hash that will be used as a tag for the Docker image
    required: true
  environment:
    description: Environment to deploy Storybook to || enum<<br/>`temploy`,<br/>`staging`,<br/>>'
    required: true
  env-file:
    description: "`.env` file name from which to read variables. Required for temploy deployment only"
    required: false
    default: .env.temploy
  davinci-branch:
    description: Custom davinci branch
    required: false
    default: master
  dist-folder:
    description: Path to folder where Storybook is built
    required: false
    default: ./storybook-static
  build-command:
    description: Command to build Storybook with
    required: false
    default: storybook:build
  use-prebuilt-package:
    description: If a prebuilt Storybook package should be used
    required: false
    default: 'false'
  use-prebuilt-image:
    description: If a prebuilt Storybook Docker image should be used
    required: false
    default: 'false'
  jenkins-folder-name:
    description: Jenkins folder where the deployment jobs are located
    required: false
  generate-types-command:
    description: Command to generate gql types
    required: false
    default: 'false'
  pr-number:
    description: Event number of the original pr, in case event number or issue number is not present. .
    required: false
    default: false

runs:
  using: composite
  steps:
    - name: Set up node
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: Install Dependencies
      if: ${{ inputs.use-prebuilt-package == 'false' && inputs.use-prebuilt-image == 'false' }}
      uses: toptal/davinci-github-actions/yarn-install@v4.8.2

    - name: Generate Types
      if: ${{ inputs.generate-types-command != 'false' }}
      uses: toptal/davinci-github-actions/generate-gql-types@v4.8.2
      with:
        generate-types-command: ${{ inputs.generate-types-command }}
        gcr-gql-schemas-bucket-token: ${{ env.GCR_GQL_SCHEMAS_BUCKET_TOKEN }}

    - name: Build Storybook
      if: ${{ inputs.use-prebuilt-package == 'false' && inputs.use-prebuilt-image == 'false' }}
      shell: bash
      env:
        BUILD_COMMAND: ${{ inputs.build-command }}
      run: yarn "$BUILD_COMMAND"

    - name: Specify Repository, Jenkins folder and Release Name
      id: repo
      shell: bash
      env:
        FOLDER_NAME: ${{ inputs.jenkins-folder-name }}
        EVENT_NUMBER: ${{ github.event.number || github.event.issue.number || inputs.pr-number }}
      run: |
        folder_name=$FOLDER_NAME

        if [[ "$folder_name" == '' ]]; then
          echo folder_name=${{ github.event.repository.name }} >> $GITHUB_OUTPUT
        else
          echo folder_name=$FOLDER_NAME >> $GITHUB_OUTPUT
        fi

        echo "repository_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
        echo "release_name=${{ github.event.repository.name }}-pr-$EVENT_NUMBER-storybook" >> $GITHUB_OUTPUT
        echo "pr_number=${{ inputs.pr-number }}" >> $GITHUB_OUTPUT
        
    - name: Build and Push Storybook Image
      uses: toptal/davinci-github-actions/build-push-image@v4.8.4
      if: ${{ inputs.use-prebuilt-image == 'false' }}
      with:
        sha: ${{ inputs.sha }}
        image-name: ${{ steps.repo.outputs.repository_name }}-storybook-release
        build-args: |
          DIST_FOLDER=${{ inputs.dist-folder }}
          NGINX_CONFIG=./davinci/packages/davinci/docker/nginx-vhost.conf
          ENV_RUNTIME_ENTRYPOINT=./davinci/packages/ci/src/configs/docker/env-runtime.entrypoint.sh
          VERSION=${{ inputs.sha }}
        docker-file: ./davinci/packages/ci/src/configs/docker/Dockerfile.gha-deploy
        davinci-branch: ${{ inputs.davinci-branch }}

    - name: Trigger Deploy to Staging
      if: ${{ inputs.environment == 'staging' }}
      uses: toptal/jenkins-job-trigger-action@1.0.1
      env:
        JENKINS_FOLDER_NAME: ${{ steps.repo.outputs.folder_name }}
        REPOSITORY_NAME: ${{ steps.repo.outputs.repository_name }}
      with:
        jenkins_url: https://jenkins.toptal.net
        jenkins_user: toptal-devbot
        jenkins_token: ${{ env.JENKINS_DEPLOY_TOKEN }}
        job_name: ${{ env.JENKINS_FOLDER_NAME }}/job/${{ env.REPOSITORY_NAME }}-storybook-staging-deployment
        job_params: |
          {
            "TAG": "${{ inputs.sha }}"
          }
        job_timeout: 1200

    - uses: toptal/davinci-github-actions/extract-env-variables@v4.8.3
      if: ${{ inputs.environment == 'temploy' }}
      id: env-variables
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        filename: ${{ inputs.env-file }}

    - name: Trigger Deploy to Temploy
      if: ${{ inputs.environment == 'temploy' }}
      uses: toptal/jenkins-job-trigger-action@1.0.1
      env:
        JENKINS_FOLDER_NAME: ${{ steps.repo.outputs.folder_name }}
        REPOSITORY_NAME: ${{ steps.repo.outputs.repository_name }}
        RELEASE: ${{ steps.repo.outputs.release_name }}
      with:
        jenkins_url: https://jenkins-build.toptal.net/
        jenkins_user: toptal-jenkins
        jenkins_token: ${{ env.JENKINS_DEPLOY_TOKEN }}
        job_name: ${{ env.JENKINS_FOLDER_NAME }}/job/${{ env.REPOSITORY_NAME }}-storybook-temploy-helm-run
        job_params: |
          {
            "REPOSITORY_NAME": "${{ env.REPOSITORY_NAME }}-storybook",
            "RELEASE": "${{ env.RELEASE }}",
            "TAG": "${{ inputs.sha }}",
            "ENV": "${{ steps.env-variables.outputs.variables }}"
          }
        job_timeout: 1200

    - name: Post Temploy Link
      if: ${{ inputs.environment == 'temploy' }}
      uses: actions/github-script@v6.3.3
      env:
        RELEASE: ${{ steps.repo.outputs.release_name }}
        PR_NUMBER: ${{ steps.repo.outputs.pr_number }}
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          const { issue: { number: issue_number }, repo: { owner, repo }  } = context
          const name = ['${{ env.RELEASE }}', '${{ steps.repo.outputs.repository_name }}-storybook'].join('-').substring(0, 45)
          const body = `Storybook temploy is available at https://${name}.toptal.rocks :tada:`
          const number = issue_number || ${{ env.PR_NUMBER }}
          github.rest.issues.createComment({ issue_number: number, owner, repo, body })
