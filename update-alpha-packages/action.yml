name: Update Alpha Packages

description: |
  Updates dependencies in all package.json files to use alpha packages from a specified PR.
  The action extracts the alpha package information from toptal-devbot comments,
  updates all package.json files in the repository, and creates pull request with changes.

inputs:
  pull_request_url:
    description: Link to a PR with alpha packages generated
    required: true
  workload_identity_provider:
    description: Workload identity provider for Google Secret Manager
    required: true
  service_account:
    description: Service account for Google Secret Manager
    required: true

runs:
  using: composite
  steps:

    - name: Check out
      uses: actions/checkout@v4

    - name: GSM Secrets
      id: secrets_manager
      uses: toptal/actions/gsm-secrets@v1.0.2
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}
        secrets_name: |-
          TOPTAL_DEVBOT_TOKEN:toptal-ci/TOPTAL_DEVBOT_TOKEN
          NPM_TOKEN_READ_ONLY:toptal-ci/NPM_TOKEN_READ_ONLY

    - name: Parse secrets
      id: parse_secrets
      uses: toptal/actions/expose-json-outputs@v1.0.2
      with:
        json: ${{ steps.secrets_manager.outputs.secrets }}

    - name: Set ENV Variables
      shell: bash
      run: |-
        echo "NPM_TOKEN=${{ steps.parse_secrets.outputs.NPM_TOKEN_READ_ONLY }}" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=${{ steps.parse_secrets.outputs.TOPTAL_DEVBOT_TOKEN }}" >> $GITHUB_ENV

    - name: Update packages from PR
      shell: bash
      run: |
        echo "Extracting packages from the last comment by toptal-devbot..."

        pr_link="${{ inputs.pull_request_url }}"

        ALPHA_PACKAGES=$(gh pr view $pr_link --comments --json comments \
        | jq '.comments | map(select(.author.login == "toptal-devbot")) | sort_by(.createdAt) | last | .body' |\
        grep -oE 'yarn add ([^`]+)`<br/>' | sed -E 's/yarn add ([^`]+)`<br\/>/\1/g')

        if test -z "$ALPHA_PACKAGES"
        then
        echo "Found no alpha packages in the PR. Be sure to generate them before running the action."
        exit 1
        else
        echo "Found alpha packages in $pr_link"
        fi

        readarray -t ALPHA_PKG_ARRAY <<< "$ALPHA_PACKAGES"

        echo "Finding all package.json files in the repo..."

        PACKAGE_JSON_FILES=$(find . -type f -name "package.json" | grep -v '/node_modules/')

        readarray -t PKG_JSON_ARRAY <<< "$PACKAGE_JSON_FILES"


        for pkg_json in "${PKG_JSON_ARRAY[@]}"; do

        echo "Updating $pkg_json..."

        for pkg in "${ALPHA_PKG_ARRAY[@]}"; do
        # Extract package name and version
        pkg_name="@$(echo $pkg | cut -d'@' -f2 | cut -d' ' -f1)"
        version=$(echo $pkg | cut -d'@' -f3)

        # checking for all kinds of dependencies: normal, dev and peer
        if jq -e ".dependencies[\"$pkg_name\"]" $pkg_json >/dev/null 2>&1; then
        jq --arg pkg_name $pkg_name --arg version $version '.dependencies[$pkg_name] = $version' $pkg_json > temp.json && mv temp.json $pkg_json
        fi
        if jq -e ".devDependencies[\"$pkg_name\"]" $pkg_json >/dev/null 2>&1; then
        jq --arg pkg_name $pkg_name --arg version $version '.devDependencies[$pkg_name] = $version' $pkg_json > temp.json && mv temp.json $pkg_json
        fi
        if jq -e ".peerDependencies[\"$pkg_name\"]" $pkg_json >/dev/null 2>&1; then
        jq --arg pkg_name $pkg_name --arg version $version '.peerDependencies[$pkg_name] = $version' $pkg_json > temp.json && mv temp.json $pkg_json
        fi
        done

        done

    - name: Setup node
      uses: actions/setup-node@v4
      with:
        node-version-file: '.nvmrc'

    - name: Install dependencies and update lockfile
      shell: bash
      run: |
        npm set "//registry.npmjs.org/:_authToken=$NPM_TOKEN"
        yarn install

    - name: Commit changes to new branch and create PR
      shell: bash
      run: |
        git config --global user.email "bot@toptal.com"
        git config --global user.name "toptal-devbot"

        formatted_pr_name=$(gh pr view "${{ inputs.pull_request_url }}" --json headRefName | jq -r ".headRefName")
        git checkout -b "$formatted_pr_name"
        git add .
        git commit --no-verify -m "Update dependencies from alpha packages"
        git push --no-verify -u origin "$formatted_pr_name"
        gh pr create --draft --title "Update dependencies from alpha packages" --body "This PR updates dependencies from alpha packages generated by toptal-devbot. It was created automatically from ${{ inputs.pull_request_url }}." --base "master" --head "$formatted_pr_name"
